from telethon import TelegramClient, events
import asyncio
import logging
import time

# ===================== CONFIG ===================== #
API_ID = 1234567                    # –í–∞—à API ID —Å my.telegram.org
API_HASH = "abcdef12345"            # –í–∞—à API HASH
BOT_TOKEN = "123456:ABC-DEF1234ghIkl"  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç @BotFather
SESSION_NAME = "parser_bot"         # –ò–º—è —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
MAX_PARTICIPANTS = 10000            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
# ================= END CONFIG ===================== #

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class ParserBot:
    def __init__(self):
        self.is_parsing = False
        self.current_task = None
        self.client = TelegramClient(f"{SESSION_NAME}_user", API_ID, API_HASH)
        self.bot = TelegramClient(f"{SESSION_NAME}_bot", API_ID, API_HASH)

    async def init_clients(self):
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await self.client.start()
        logger.info("User client started")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await self.bot.start(bot_token=BOT_TOKEN)
        logger.info("Bot client started")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.register_handlers()

    def register_handlers(self):
        @self.bot.on(events.NewMessage(pattern=r'^/start$'))
        async def start_handler(event):
            await event.respond(
                "ü§ñ **–ë–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–æ–≤**\n\n"
                "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ:\n"
                "`/parse @username` - –ø–∞—Ä—Å–∏–Ω–≥ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞\n"
                "`/parse` - –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞\n"
                "`/stop` - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥\n"
                "`/status` - —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã\n\n"
                f"‚ö† –õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {MAX_PARTICIPANTS}"
            )

        @self.bot.on(events.NewMessage(pattern=r'^/parse(?: |$)(.+)?$'))
        async def parse_handler(event):
            if self.is_parsing:
                await event.respond("‚ö† –£–∂–µ –∏–¥–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /stop")
                return
            
            chat_input = event.pattern_match.group(1)
            if not chat_input:
                if event.is_private:
                    await event.respond("‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∞—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (/parse @username)")
                    return
                chat_input = event.chat.username or f"-100{event.chat.id}"
            
            try:
                msg = await event.respond(f"üîÑ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ —á–∞—Ç–∞ {chat_input}...")
                self.is_parsing = True
                self.current_task = asyncio.create_task(self.parse_members(chat_input, event))
                await self.current_task
            except Exception as e:
                await msg.edit(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

        @self.bot.on(events.NewMessage(pattern=r'^/stop$'))
        async def stop_handler(event):
            if self.is_parsing:
                self.is_parsing = False
                if self.current_task:
                    self.current_task.cancel()
                await event.respond("‚èπ –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                await event.respond("‚Ñπ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –ø–∞—Ä—Å–∏–Ω–≥–∞")

        @self.bot.on(events.NewMessage(pattern=r'^/status$'))
        async def status_handler(event):
            if self.is_parsing:
                await event.respond("üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...")
            else:
                await event.respond("üí§ –ë–æ—Ç —Å–≤–æ–±–æ–¥–µ–Ω, –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥")

    async def parse_members(self, chat_id, event):
        try:
            participants = []
            counter = 0
            last_report = 0
            
            async for user in self.client.iter_participants(chat_id, aggressive=True):
                if not self.is_parsing:
                    await event.respond("‚èπ –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    return
                
                participants.append(user)
                counter += 1
                
                if counter % 100 == 0 or time.time() - last_report > 5:
                    last_report = time.time()
                    await event.respond(f"‚è≥ –°–æ–±—Ä–∞–Ω–æ {counter} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
                
                if counter >= MAX_PARTICIPANTS:
                    await event.respond(f"‚ö† –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ {MAX_PARTICIPANTS} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                    break
            
            if not participants:
                await event.respond("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                return
            
            filename = f"members_{chat_id.replace('@', '')}.txt"
            with open(filename, "w", encoding="utf-8") as f:
                for user in participants:
                    name = f"{user.first_name or ''} {user.last_name or ''}".strip()
                    username = f"@{user.username}" if user.username else "–Ω–µ—Ç"
                    phone = f" | –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}" if user.phone else ""
                    f.write(f"ID: {user.id} | –ò–º—è: {name} | –ù–∏–∫: {username}{phone}\n")
            
            await event.respond(
                f"‚úÖ –ì–æ—Ç–æ–≤–æ! –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
                f"–§–∞–π–ª: `{filename}`",
                file=filename
            )
            
        except Exception as e:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        finally:
            self.is_parsing = False
            self.current_task = None

    async def run(self):
        await self.init_clients()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        await self.bot.run_until_disconnected()

async def main():
    bot = ParserBot()
    await bot.run()

if __name__ == "__main__":
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
